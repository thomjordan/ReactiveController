//
//  KeyscaleStyleKit.swift
//  ReactiveControls
//
//  Created by ThomJordan on 8/16/17.
//  Copyright Â© 2017  . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import Cocoa

public class KeyscaleStyleKit : NSObject {
    
    //// Drawing Methods
    
    @objc dynamic public class func drawKeyscaleBox(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 118, height: 66), resizing: ResizingBehavior = .aspectFit, pc00: Bool = true, pc01: Bool = false, pc02: Bool = true, pc03: Bool = true, pc04: Bool = false, pc05: Bool = true, pc06: Bool = false, pc07: Bool = true, pc08: Bool = true, pc09: Bool = false, pc10: Bool = true, pc11: Bool = false, play0: Bool = false, play1: Bool = false, play2: Bool = false, play3: Bool = false, play4: Bool = false, play5: Bool = false, play6: Bool = false, play7: Bool = false, play8: Bool = false, play9: Bool = false, playA: Bool = false, playB: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 118, height: 66), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 118, y: resizedFrame.height / 66)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 118, resizedFrame.height / 66)
        
        
        //// Color Declarations
        let color = NSColor(red: 0.912, green: 0.916, blue: 0.871, alpha: 1)
        let color2 = NSColor(red: 0.275, green: 0.273, blue: 0.286, alpha: 1)
        let orange = NSColor(red: 1, green: 0.624, blue: 0, alpha: 1)
        let shadowColor = NSColor(red: 0.21, green: 0.21, blue: 0.21, alpha: 1)
        let bgColor = NSColor(red: 0.486, green: 0.486, blue: 0.507, alpha: 1)
        let green = NSColor(red: 0, green: 1, blue: 0, alpha: 1)
        
        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = shadowColor.withAlphaComponent(0.62 * shadowColor.alphaComponent)
        shadow.shadowOffset = NSSize(width: 1.5, height: -1.5)
        shadow.shadowBlurRadius = 0
        
        //// Variable Declarations
        let playing0: Bool = pc00 && play0
        let playing1: Bool = pc01 && play1
        let playing2: Bool = pc02 && play2
        let playing3: Bool = pc03 && play3
        let playing4: Bool = pc04 && play4
        let playing5: Bool = pc05 && play5
        let playing6: Bool = pc06 && play6
        let playing7: Bool = pc07 && play7
        let playing8: Bool = pc08 && play8
        let playing9: Bool = pc09 && play9
        let playingA: Bool = pc10 && playA
        let playingB: Bool = pc11 && playB
        
        //// border Drawing
        let borderPath = NSBezierPath(roundedRect: NSRect(x: 0, y: 0, width: 118, height: 66), xRadius: 2, yRadius: 2)
        bgColor.setFill()
        borderPath.fill()
        
        
        //// pc00key Drawing
        let pc00keyPath = NSBezierPath()
        pc00keyPath.move(to: NSPoint(x: 11.8, y: 27.17))
        pc00keyPath.curve(to: NSPoint(x: 12.42, y: 26.5), controlPoint1: NSPoint(x: 11.8, y: 26.78), controlPoint2: NSPoint(x: 12.08, y: 26.5))
        pc00keyPath.line(to: NSPoint(x: 17, y: 26.5))
        pc00keyPath.curve(to: NSPoint(x: 17, y: 3.5), controlPoint1: NSPoint(x: 17, y: 14.16), controlPoint2: NSPoint(x: 17, y: 3.5))
        pc00keyPath.curve(to: NSPoint(x: 15.5, y: 2), controlPoint1: NSPoint(x: 17, y: 2.67), controlPoint2: NSPoint(x: 16.33, y: 2))
        pc00keyPath.line(to: NSPoint(x: 2.5, y: 2))
        pc00keyPath.curve(to: NSPoint(x: 1, y: 3.5), controlPoint1: NSPoint(x: 1.67, y: 2), controlPoint2: NSPoint(x: 1, y: 2.67))
        pc00keyPath.line(to: NSPoint(x: 1, y: 63.5))
        pc00keyPath.curve(to: NSPoint(x: 2.5, y: 65), controlPoint1: NSPoint(x: 1, y: 64.33), controlPoint2: NSPoint(x: 1.67, y: 65))
        pc00keyPath.line(to: NSPoint(x: 11.8, y: 65))
        pc00keyPath.curve(to: NSPoint(x: 11.8, y: 27.12), controlPoint1: NSPoint(x: 11.8, y: 55.71), controlPoint2: NSPoint(x: 11.8, y: 27.12))
        pc00keyPath.line(to: NSPoint(x: 11.8, y: 27.17))
        pc00keyPath.close()
        NSGraphicsContext.saveGraphicsState()
        context.setShadow(offset: NSSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: shadow.shadowColor!.cgColor)
        color.setFill()
        pc00keyPath.fill()
        NSGraphicsContext.restoreGraphicsState()
        
        color2.setStroke()
        pc00keyPath.lineWidth = 1
        pc00keyPath.stroke()
        
        
        //// pc01key Drawing
        let pc01keyPath = NSBezierPath()
        pc01keyPath.move(to: NSPoint(x: 11.8, y: 27.12))
        pc01keyPath.curve(to: NSPoint(x: 12.42, y: 26.5), controlPoint1: NSPoint(x: 11.8, y: 26.78), controlPoint2: NSPoint(x: 12.08, y: 26.5))
        pc01keyPath.line(to: NSPoint(x: 20.98, y: 26.5))
        pc01keyPath.curve(to: NSPoint(x: 21.6, y: 27.12), controlPoint1: NSPoint(x: 21.32, y: 26.5), controlPoint2: NSPoint(x: 21.6, y: 26.78))
        pc01keyPath.line(to: NSPoint(x: 21.6, y: 64.88))
        pc01keyPath.curve(to: NSPoint(x: 20.98, y: 65.5), controlPoint1: NSPoint(x: 21.6, y: 65.22), controlPoint2: NSPoint(x: 21.32, y: 65.5))
        pc01keyPath.line(to: NSPoint(x: 12.42, y: 65.5))
        pc01keyPath.curve(to: NSPoint(x: 11.8, y: 64.88), controlPoint1: NSPoint(x: 12.08, y: 65.5), controlPoint2: NSPoint(x: 11.8, y: 65.22))
        pc01keyPath.line(to: NSPoint(x: 11.8, y: 27.12))
        pc01keyPath.close()
        color2.setFill()
        pc01keyPath.fill()
        color2.setStroke()
        pc01keyPath.lineWidth = 1
        pc01keyPath.stroke()
        
        
        //// pc02key Drawing
        let pc02keyPath = NSBezierPath()
        pc02keyPath.move(to: NSPoint(x: 21.59, y: 65))
        pc02keyPath.curve(to: NSPoint(x: 29.41, y: 65), controlPoint1: NSPoint(x: 21.59, y: 65), controlPoint2: NSPoint(x: 25.88, y: 65))
        pc02keyPath.curve(to: NSPoint(x: 29.4, y: 64.88), controlPoint1: NSPoint(x: 29.4, y: 64.96), controlPoint2: NSPoint(x: 29.4, y: 64.92))
        pc02keyPath.line(to: NSPoint(x: 29.4, y: 27.12))
        pc02keyPath.curve(to: NSPoint(x: 30.02, y: 26.5), controlPoint1: NSPoint(x: 29.4, y: 26.78), controlPoint2: NSPoint(x: 29.68, y: 26.5))
        pc02keyPath.line(to: NSPoint(x: 34, y: 26.5))
        pc02keyPath.curve(to: NSPoint(x: 34, y: 2), controlPoint1: NSPoint(x: 34, y: 13.4), controlPoint2: NSPoint(x: 34, y: 2))
        pc02keyPath.line(to: NSPoint(x: 17, y: 2))
        pc02keyPath.curve(to: NSPoint(x: 17, y: 26.5), controlPoint1: NSPoint(x: 17, y: 2), controlPoint2: NSPoint(x: 17, y: 13.4))
        pc02keyPath.line(to: NSPoint(x: 20.98, y: 26.5))
        pc02keyPath.curve(to: NSPoint(x: 21.6, y: 27.12), controlPoint1: NSPoint(x: 21.32, y: 26.5), controlPoint2: NSPoint(x: 21.6, y: 26.78))
        pc02keyPath.curve(to: NSPoint(x: 21.6, y: 42.54), controlPoint1: NSPoint(x: 21.6, y: 27.12), controlPoint2: NSPoint(x: 21.6, y: 34.38))
        pc02keyPath.curve(to: NSPoint(x: 21.6, y: 64.88), controlPoint1: NSPoint(x: 21.6, y: 52.98), controlPoint2: NSPoint(x: 21.6, y: 64.88))
        pc02keyPath.curve(to: NSPoint(x: 21.59, y: 65), controlPoint1: NSPoint(x: 21.6, y: 64.92), controlPoint2: NSPoint(x: 21.6, y: 64.96))
        pc02keyPath.line(to: NSPoint(x: 21.59, y: 65))
        pc02keyPath.close()
        NSGraphicsContext.saveGraphicsState()
        context.setShadow(offset: NSSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: shadow.shadowColor!.cgColor)
        color.setFill()
        pc02keyPath.fill()
        NSGraphicsContext.restoreGraphicsState()
        
        color2.setStroke()
        pc02keyPath.lineWidth = 1
        pc02keyPath.stroke()
        
        
        //// pc03key Drawing
        let pc03keyPath = NSBezierPath()
        pc03keyPath.move(to: NSPoint(x: 29.4, y: 27.12))
        pc03keyPath.curve(to: NSPoint(x: 30.02, y: 26.5), controlPoint1: NSPoint(x: 29.4, y: 26.78), controlPoint2: NSPoint(x: 29.68, y: 26.5))
        pc03keyPath.line(to: NSPoint(x: 38.58, y: 26.5))
        pc03keyPath.curve(to: NSPoint(x: 39.2, y: 27.12), controlPoint1: NSPoint(x: 38.92, y: 26.5), controlPoint2: NSPoint(x: 39.2, y: 26.78))
        pc03keyPath.line(to: NSPoint(x: 39.2, y: 64.88))
        pc03keyPath.curve(to: NSPoint(x: 38.58, y: 65.5), controlPoint1: NSPoint(x: 39.2, y: 65.22), controlPoint2: NSPoint(x: 38.92, y: 65.5))
        pc03keyPath.line(to: NSPoint(x: 30.02, y: 65.5))
        pc03keyPath.curve(to: NSPoint(x: 29.4, y: 64.88), controlPoint1: NSPoint(x: 29.68, y: 65.5), controlPoint2: NSPoint(x: 29.4, y: 65.22))
        pc03keyPath.line(to: NSPoint(x: 29.4, y: 27.12))
        pc03keyPath.close()
        color2.setFill()
        pc03keyPath.fill()
        color2.setStroke()
        pc03keyPath.lineWidth = 1
        pc03keyPath.stroke()
        
        
        //// pc04key Drawing
        let pc04keyPath = NSBezierPath()
        pc04keyPath.move(to: NSPoint(x: 50, y: 63.5))
        pc04keyPath.line(to: NSPoint(x: 50, y: 3.5))
        pc04keyPath.curve(to: NSPoint(x: 48.5, y: 2), controlPoint1: NSPoint(x: 50, y: 2.67), controlPoint2: NSPoint(x: 49.33, y: 2))
        pc04keyPath.line(to: NSPoint(x: 35.5, y: 2))
        pc04keyPath.curve(to: NSPoint(x: 34, y: 3.5), controlPoint1: NSPoint(x: 34.67, y: 2), controlPoint2: NSPoint(x: 34, y: 2.67))
        pc04keyPath.curve(to: NSPoint(x: 34, y: 26.5), controlPoint1: NSPoint(x: 34, y: 3.5), controlPoint2: NSPoint(x: 34, y: 14.16))
        pc04keyPath.line(to: NSPoint(x: 38.73, y: 26.5))
        pc04keyPath.curve(to: NSPoint(x: 39.35, y: 27.12), controlPoint1: NSPoint(x: 39.07, y: 26.5), controlPoint2: NSPoint(x: 39.35, y: 26.78))
        pc04keyPath.curve(to: NSPoint(x: 39.35, y: 65), controlPoint1: NSPoint(x: 39.35, y: 27.12), controlPoint2: NSPoint(x: 39.35, y: 50.63))
        pc04keyPath.line(to: NSPoint(x: 48.5, y: 65))
        pc04keyPath.curve(to: NSPoint(x: 50, y: 63.5), controlPoint1: NSPoint(x: 49.33, y: 65), controlPoint2: NSPoint(x: 50, y: 64.33))
        pc04keyPath.close()
        NSGraphicsContext.saveGraphicsState()
        context.setShadow(offset: NSSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: shadow.shadowColor!.cgColor)
        color.setFill()
        pc04keyPath.fill()
        NSGraphicsContext.restoreGraphicsState()
        
        color2.setStroke()
        pc04keyPath.lineWidth = 1
        pc04keyPath.stroke()
        
        
        //// pc05key Drawing
        let pc05keyPath = NSBezierPath()
        pc05keyPath.move(to: NSPoint(x: 60.3, y: 27.17))
        pc05keyPath.curve(to: NSPoint(x: 60.92, y: 26.5), controlPoint1: NSPoint(x: 60.3, y: 26.78), controlPoint2: NSPoint(x: 60.58, y: 26.5))
        pc05keyPath.line(to: NSPoint(x: 67, y: 26.5))
        pc05keyPath.curve(to: NSPoint(x: 67, y: 3.5), controlPoint1: NSPoint(x: 67, y: 14.16), controlPoint2: NSPoint(x: 67, y: 3.5))
        pc05keyPath.curve(to: NSPoint(x: 65.5, y: 2), controlPoint1: NSPoint(x: 67, y: 2.67), controlPoint2: NSPoint(x: 66.33, y: 2))
        pc05keyPath.line(to: NSPoint(x: 51.5, y: 2))
        pc05keyPath.curve(to: NSPoint(x: 50, y: 3.5), controlPoint1: NSPoint(x: 50.67, y: 2), controlPoint2: NSPoint(x: 50, y: 2.67))
        pc05keyPath.line(to: NSPoint(x: 50, y: 63.5))
        pc05keyPath.curve(to: NSPoint(x: 51.5, y: 65), controlPoint1: NSPoint(x: 50, y: 64.33), controlPoint2: NSPoint(x: 50.67, y: 65))
        pc05keyPath.line(to: NSPoint(x: 60.3, y: 65))
        pc05keyPath.curve(to: NSPoint(x: 60.3, y: 27.12), controlPoint1: NSPoint(x: 60.3, y: 55.71), controlPoint2: NSPoint(x: 60.3, y: 27.12))
        pc05keyPath.line(to: NSPoint(x: 60.3, y: 27.17))
        pc05keyPath.close()
        NSGraphicsContext.saveGraphicsState()
        context.setShadow(offset: NSSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: shadow.shadowColor!.cgColor)
        color.setFill()
        pc05keyPath.fill()
        NSGraphicsContext.restoreGraphicsState()
        
        color2.setStroke()
        pc05keyPath.lineWidth = 1
        pc05keyPath.stroke()
        
        
        //// pc06key Drawing
        let pc06keyPath = NSBezierPath()
        pc06keyPath.move(to: NSPoint(x: 60.15, y: 27.12))
        pc06keyPath.curve(to: NSPoint(x: 60.77, y: 26.5), controlPoint1: NSPoint(x: 60.15, y: 26.78), controlPoint2: NSPoint(x: 60.43, y: 26.5))
        pc06keyPath.line(to: NSPoint(x: 69.33, y: 26.5))
        pc06keyPath.curve(to: NSPoint(x: 69.95, y: 27.12), controlPoint1: NSPoint(x: 69.67, y: 26.5), controlPoint2: NSPoint(x: 69.95, y: 26.78))
        pc06keyPath.line(to: NSPoint(x: 69.95, y: 64.88))
        pc06keyPath.curve(to: NSPoint(x: 69.33, y: 65.5), controlPoint1: NSPoint(x: 69.95, y: 65.22), controlPoint2: NSPoint(x: 69.67, y: 65.5))
        pc06keyPath.line(to: NSPoint(x: 60.77, y: 65.5))
        pc06keyPath.curve(to: NSPoint(x: 60.15, y: 64.88), controlPoint1: NSPoint(x: 60.43, y: 65.5), controlPoint2: NSPoint(x: 60.15, y: 65.22))
        pc06keyPath.line(to: NSPoint(x: 60.15, y: 27.12))
        pc06keyPath.close()
        color2.setFill()
        pc06keyPath.fill()
        color2.setStroke()
        pc06keyPath.lineWidth = 1
        pc06keyPath.stroke()
        
        
        //// pc07key Drawing
        let pc07keyPath = NSBezierPath()
        pc07keyPath.move(to: NSPoint(x: 78.3, y: 27.2))
        pc07keyPath.curve(to: NSPoint(x: 78.92, y: 26.5), controlPoint1: NSPoint(x: 78.32, y: 26.76), controlPoint2: NSPoint(x: 78.59, y: 26.5))
        pc07keyPath.line(to: NSPoint(x: 83, y: 26.5))
        pc07keyPath.curve(to: NSPoint(x: 83, y: 3.5), controlPoint1: NSPoint(x: 83, y: 14.16), controlPoint2: NSPoint(x: 83, y: 3.5))
        pc07keyPath.curve(to: NSPoint(x: 81.5, y: 2), controlPoint1: NSPoint(x: 83, y: 2.67), controlPoint2: NSPoint(x: 82.33, y: 2))
        pc07keyPath.line(to: NSPoint(x: 68.5, y: 2))
        pc07keyPath.curve(to: NSPoint(x: 67, y: 3.5), controlPoint1: NSPoint(x: 67.67, y: 2), controlPoint2: NSPoint(x: 67, y: 2.67))
        pc07keyPath.curve(to: NSPoint(x: 67, y: 18.67), controlPoint1: NSPoint(x: 67, y: 3.5), controlPoint2: NSPoint(x: 67, y: 9.97))
        pc07keyPath.curve(to: NSPoint(x: 67, y: 26.5), controlPoint1: NSPoint(x: 67, y: 21.13), controlPoint2: NSPoint(x: 67, y: 23.78))
        pc07keyPath.line(to: NSPoint(x: 69.48, y: 26.5))
        pc07keyPath.curve(to: NSPoint(x: 70.1, y: 27.12), controlPoint1: NSPoint(x: 69.82, y: 26.5), controlPoint2: NSPoint(x: 70.1, y: 26.78))
        pc07keyPath.curve(to: NSPoint(x: 70.1, y: 65), controlPoint1: NSPoint(x: 70.1, y: 27.12), controlPoint2: NSPoint(x: 70.1, y: 55.71))
        pc07keyPath.line(to: NSPoint(x: 78.3, y: 65))
        pc07keyPath.curve(to: NSPoint(x: 78.3, y: 27.17), controlPoint1: NSPoint(x: 78.3, y: 55.93), controlPoint2: NSPoint(x: 78.3, y: 28.45))
        pc07keyPath.line(to: NSPoint(x: 78.3, y: 27.2))
        pc07keyPath.close()
        NSGraphicsContext.saveGraphicsState()
        context.setShadow(offset: NSSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: shadow.shadowColor!.cgColor)
        color.setFill()
        pc07keyPath.fill()
        NSGraphicsContext.restoreGraphicsState()
        
        color2.setStroke()
        pc07keyPath.lineWidth = 1
        pc07keyPath.stroke()
        
        
        //// pc08key Drawing
        let pc08keyPath = NSBezierPath()
        pc08keyPath.move(to: NSPoint(x: 78.1, y: 27.12))
        pc08keyPath.curve(to: NSPoint(x: 78.72, y: 26.5), controlPoint1: NSPoint(x: 78.1, y: 26.78), controlPoint2: NSPoint(x: 78.38, y: 26.5))
        pc08keyPath.line(to: NSPoint(x: 87.28, y: 26.5))
        pc08keyPath.curve(to: NSPoint(x: 87.9, y: 27.12), controlPoint1: NSPoint(x: 87.62, y: 26.5), controlPoint2: NSPoint(x: 87.9, y: 26.78))
        pc08keyPath.line(to: NSPoint(x: 87.9, y: 64.88))
        pc08keyPath.curve(to: NSPoint(x: 87.28, y: 65.5), controlPoint1: NSPoint(x: 87.9, y: 65.22), controlPoint2: NSPoint(x: 87.62, y: 65.5))
        pc08keyPath.line(to: NSPoint(x: 78.72, y: 65.5))
        pc08keyPath.curve(to: NSPoint(x: 78.1, y: 64.88), controlPoint1: NSPoint(x: 78.38, y: 65.5), controlPoint2: NSPoint(x: 78.1, y: 65.22))
        pc08keyPath.line(to: NSPoint(x: 78.1, y: 27.12))
        pc08keyPath.close()
        color2.setFill()
        pc08keyPath.fill()
        color2.setStroke()
        pc08keyPath.lineWidth = 1
        pc08keyPath.stroke()
        
        
        //// pc09key Drawing
        let pc09keyPath = NSBezierPath()
        pc09keyPath.move(to: NSPoint(x: 96.3, y: 27.2))
        pc09keyPath.curve(to: NSPoint(x: 96.92, y: 26.5), controlPoint1: NSPoint(x: 96.32, y: 26.76), controlPoint2: NSPoint(x: 96.59, y: 26.5))
        pc09keyPath.line(to: NSPoint(x: 100, y: 26.5))
        pc09keyPath.curve(to: NSPoint(x: 100, y: 3.5), controlPoint1: NSPoint(x: 100, y: 14.16), controlPoint2: NSPoint(x: 100, y: 3.5))
        pc09keyPath.curve(to: NSPoint(x: 98.5, y: 2), controlPoint1: NSPoint(x: 100, y: 2.67), controlPoint2: NSPoint(x: 99.33, y: 2))
        pc09keyPath.line(to: NSPoint(x: 84.5, y: 2))
        pc09keyPath.curve(to: NSPoint(x: 83, y: 3.5), controlPoint1: NSPoint(x: 83.67, y: 2), controlPoint2: NSPoint(x: 83, y: 2.67))
        pc09keyPath.curve(to: NSPoint(x: 83, y: 18.9), controlPoint1: NSPoint(x: 83, y: 3.5), controlPoint2: NSPoint(x: 83, y: 10.09))
        pc09keyPath.curve(to: NSPoint(x: 83, y: 26.5), controlPoint1: NSPoint(x: 83, y: 21.3), controlPoint2: NSPoint(x: 83, y: 23.86))
        pc09keyPath.line(to: NSPoint(x: 87.48, y: 26.5))
        pc09keyPath.curve(to: NSPoint(x: 88.1, y: 27.12), controlPoint1: NSPoint(x: 87.82, y: 26.5), controlPoint2: NSPoint(x: 88.1, y: 26.78))
        pc09keyPath.curve(to: NSPoint(x: 88.1, y: 65), controlPoint1: NSPoint(x: 88.1, y: 27.12), controlPoint2: NSPoint(x: 88.1, y: 55.71))
        pc09keyPath.line(to: NSPoint(x: 96.3, y: 65))
        pc09keyPath.curve(to: NSPoint(x: 96.3, y: 27.17), controlPoint1: NSPoint(x: 96.3, y: 55.93), controlPoint2: NSPoint(x: 96.3, y: 28.45))
        pc09keyPath.line(to: NSPoint(x: 96.3, y: 27.2))
        pc09keyPath.close()
        NSGraphicsContext.saveGraphicsState()
        context.setShadow(offset: NSSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: shadow.shadowColor!.cgColor)
        color.setFill()
        pc09keyPath.fill()
        NSGraphicsContext.restoreGraphicsState()
        
        color2.setStroke()
        pc09keyPath.lineWidth = 1
        pc09keyPath.stroke()
        
        
        //// pc10key Drawing
        let pc10keyPath = NSBezierPath()
        pc10keyPath.move(to: NSPoint(x: 96.05, y: 27.12))
        pc10keyPath.curve(to: NSPoint(x: 96.67, y: 26.5), controlPoint1: NSPoint(x: 96.05, y: 26.78), controlPoint2: NSPoint(x: 96.33, y: 26.5))
        pc10keyPath.line(to: NSPoint(x: 105.23, y: 26.5))
        pc10keyPath.curve(to: NSPoint(x: 105.85, y: 27.12), controlPoint1: NSPoint(x: 105.57, y: 26.5), controlPoint2: NSPoint(x: 105.85, y: 26.78))
        pc10keyPath.line(to: NSPoint(x: 105.85, y: 64.88))
        pc10keyPath.curve(to: NSPoint(x: 105.23, y: 65.5), controlPoint1: NSPoint(x: 105.85, y: 65.22), controlPoint2: NSPoint(x: 105.57, y: 65.5))
        pc10keyPath.line(to: NSPoint(x: 96.67, y: 65.5))
        pc10keyPath.curve(to: NSPoint(x: 96.05, y: 64.88), controlPoint1: NSPoint(x: 96.33, y: 65.5), controlPoint2: NSPoint(x: 96.05, y: 65.22))
        pc10keyPath.line(to: NSPoint(x: 96.05, y: 27.12))
        pc10keyPath.close()
        color2.setFill()
        pc10keyPath.fill()
        color2.setStroke()
        pc10keyPath.lineWidth = 1
        pc10keyPath.stroke()
        
        
        //// pc11key Drawing
        let pc11keyPath = NSBezierPath()
        pc11keyPath.move(to: NSPoint(x: 116, y: 63.5))
        pc11keyPath.line(to: NSPoint(x: 116, y: 3.5))
        pc11keyPath.curve(to: NSPoint(x: 114.5, y: 2), controlPoint1: NSPoint(x: 116, y: 2.67), controlPoint2: NSPoint(x: 115.33, y: 2))
        pc11keyPath.line(to: NSPoint(x: 101.5, y: 2))
        pc11keyPath.curve(to: NSPoint(x: 100, y: 3.5), controlPoint1: NSPoint(x: 100.67, y: 2), controlPoint2: NSPoint(x: 100, y: 2.67))
        pc11keyPath.curve(to: NSPoint(x: 100, y: 26.5), controlPoint1: NSPoint(x: 100, y: 3.5), controlPoint2: NSPoint(x: 100, y: 14.16))
        pc11keyPath.line(to: NSPoint(x: 105.48, y: 26.5))
        pc11keyPath.curve(to: NSPoint(x: 106.1, y: 27.12), controlPoint1: NSPoint(x: 105.82, y: 26.5), controlPoint2: NSPoint(x: 106.1, y: 26.78))
        pc11keyPath.curve(to: NSPoint(x: 106.1, y: 65), controlPoint1: NSPoint(x: 106.1, y: 27.12), controlPoint2: NSPoint(x: 106.1, y: 55.71))
        pc11keyPath.line(to: NSPoint(x: 114.5, y: 65))
        pc11keyPath.curve(to: NSPoint(x: 116, y: 63.5), controlPoint1: NSPoint(x: 115.33, y: 65), controlPoint2: NSPoint(x: 116, y: 64.33))
        pc11keyPath.close()
        NSGraphicsContext.saveGraphicsState()
        context.setShadow(offset: NSSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: shadow.shadowColor!.cgColor)
        color.setFill()
        pc11keyPath.fill()
        NSGraphicsContext.restoreGraphicsState()
        
        color2.setStroke()
        pc11keyPath.lineWidth = 1
        pc11keyPath.stroke()
        
        
        if (pc00) {
            //// pc00_on Drawing
            let pc00_onPath = NSBezierPath(ovalIn: NSRect(x: 5, y: 10.5, width: 8, height: 8))
            orange.setFill()
            pc00_onPath.fill()
            color2.setStroke()
            pc00_onPath.lineWidth = 1
            pc00_onPath.stroke()
        }
        
        
        if (pc01) {
            //// pc01_on Drawing
            let pc01_onPath = NSBezierPath(ovalIn: NSRect(x: 12, y: 33.5, width: 9, height: 9))
            orange.setFill()
            pc01_onPath.fill()
            color2.setStroke()
            pc01_onPath.lineWidth = 1
            pc01_onPath.stroke()
        }
        
        
        if (pc02) {
            //// pc02_on Drawing
            let pc02_onPath = NSBezierPath(ovalIn: NSRect(x: 21.5, y: 10.5, width: 8, height: 8))
            orange.setFill()
            pc02_onPath.fill()
            color2.setStroke()
            pc02_onPath.lineWidth = 1
            pc02_onPath.stroke()
        }
        
        
        if (pc03) {
            //// pc03_on Drawing
            let pc03_onPath = NSBezierPath(ovalIn: NSRect(x: 30, y: 33.5, width: 9, height: 9))
            orange.setFill()
            pc03_onPath.fill()
            color2.setStroke()
            pc03_onPath.lineWidth = 1
            pc03_onPath.stroke()
        }
        
        
        if (pc04) {
            //// pc04_on Drawing
            let pc04_onPath = NSBezierPath(ovalIn: NSRect(x: 38, y: 10.5, width: 8, height: 8))
            orange.setFill()
            pc04_onPath.fill()
            color2.setStroke()
            pc04_onPath.lineWidth = 1
            pc04_onPath.stroke()
        }
        
        
        if (pc05) {
            //// pc05_on Drawing
            let pc05_onPath = NSBezierPath(ovalIn: NSRect(x: 54.5, y: 10.5, width: 8, height: 8))
            orange.setFill()
            pc05_onPath.fill()
            color2.setStroke()
            pc05_onPath.lineWidth = 1
            pc05_onPath.stroke()
        }
        
        
        if (pc06) {
            //// pc06_on Drawing
            let pc06_onPath = NSBezierPath(ovalIn: NSRect(x: 60.5, y: 33.5, width: 9, height: 9))
            orange.setFill()
            pc06_onPath.fill()
            color2.setStroke()
            pc06_onPath.lineWidth = 1
            pc06_onPath.stroke()
        }
        
        
        if (pc07) {
            //// pc07_on Drawing
            let pc07_onPath = NSBezierPath(ovalIn: NSRect(x: 71, y: 10.5, width: 8, height: 8))
            orange.setFill()
            pc07_onPath.fill()
            color2.setStroke()
            pc07_onPath.lineWidth = 1
            pc07_onPath.stroke()
        }
        
        
        if (pc08) {
            //// pc08_on Drawing
            let pc08_onPath = NSBezierPath(ovalIn: NSRect(x: 78.5, y: 33.5, width: 9, height: 9))
            orange.setFill()
            pc08_onPath.fill()
            color2.setStroke()
            pc08_onPath.lineWidth = 1
            pc08_onPath.stroke()
        }
        
        
        if (pc09) {
            //// pc09_on Drawing
            let pc09_onPath = NSBezierPath(ovalIn: NSRect(x: 87.5, y: 10.5, width: 8, height: 8))
            orange.setFill()
            pc09_onPath.fill()
            color2.setStroke()
            pc09_onPath.lineWidth = 1
            pc09_onPath.stroke()
        }
        
        
        if (pc10) {
            //// pc10_on Drawing
            let pc10_onPath = NSBezierPath(ovalIn: NSRect(x: 96.5, y: 33.5, width: 9, height: 9))
            orange.setFill()
            pc10_onPath.fill()
            color2.setStroke()
            pc10_onPath.lineWidth = 1
            pc10_onPath.stroke()
        }
        
        
        if (pc11) {
            //// pc11_on Drawing
            let pc11_onPath = NSBezierPath(ovalIn: NSRect(x: 104, y: 10.5, width: 8, height: 8))
            orange.setFill()
            pc11_onPath.fill()
            color2.setStroke()
            pc11_onPath.lineWidth = 1
            pc11_onPath.stroke()
        }
        
        
        if (playing0) {
            //// pc00_on 2 Drawing
            let pc00_on2Path = NSBezierPath(ovalIn: NSRect(x: 5, y: 10.5, width: 8, height: 8))
            green.setFill()
            pc00_on2Path.fill()
            color2.setStroke()
            pc00_on2Path.lineWidth = 1
            pc00_on2Path.stroke()
        }
        
        
        if (playing1) {
            //// pc01_on 2 Drawing
            let pc01_on2Path = NSBezierPath(ovalIn: NSRect(x: 12, y: 33.5, width: 9, height: 9))
            green.setFill()
            pc01_on2Path.fill()
            color2.setStroke()
            pc01_on2Path.lineWidth = 1
            pc01_on2Path.stroke()
        }
        
        
        if (playing2) {
            //// pc02_on 2 Drawing
            let pc02_on2Path = NSBezierPath(ovalIn: NSRect(x: 21.5, y: 10.5, width: 8, height: 8))
            green.setFill()
            pc02_on2Path.fill()
            color2.setStroke()
            pc02_on2Path.lineWidth = 1
            pc02_on2Path.stroke()
        }
        
        
        if (playing3) {
            //// pc03_on 2 Drawing
            let pc03_on2Path = NSBezierPath(ovalIn: NSRect(x: 30, y: 33.5, width: 9, height: 9))
            green.setFill()
            pc03_on2Path.fill()
            color2.setStroke()
            pc03_on2Path.lineWidth = 1
            pc03_on2Path.stroke()
        }
        
        
        if (playing4) {
            //// pc04_on 2 Drawing
            let pc04_on2Path = NSBezierPath(ovalIn: NSRect(x: 38, y: 10.5, width: 8, height: 8))
            green.setFill()
            pc04_on2Path.fill()
            color2.setStroke()
            pc04_on2Path.lineWidth = 1
            pc04_on2Path.stroke()
        }
        
        
        if (playing5) {
            //// pc05_on 2 Drawing
            let pc05_on2Path = NSBezierPath(ovalIn: NSRect(x: 54.5, y: 10.5, width: 8, height: 8))
            green.setFill()
            pc05_on2Path.fill()
            color2.setStroke()
            pc05_on2Path.lineWidth = 1
            pc05_on2Path.stroke()
        }
        
        
        if (playing6) {
            //// pc06_on 2 Drawing
            let pc06_on2Path = NSBezierPath(ovalIn: NSRect(x: 60.5, y: 33.5, width: 9, height: 9))
            green.setFill()
            pc06_on2Path.fill()
            color2.setStroke()
            pc06_on2Path.lineWidth = 1
            pc06_on2Path.stroke()
        }
        
        
        if (playing7) {
            //// pc07_on 2 Drawing
            let pc07_on2Path = NSBezierPath(ovalIn: NSRect(x: 71, y: 10.5, width: 8, height: 8))
            green.setFill()
            pc07_on2Path.fill()
            color2.setStroke()
            pc07_on2Path.lineWidth = 1
            pc07_on2Path.stroke()
        }
        
        
        if (playing8) {
            //// pc08_on 2 Drawing
            let pc08_on2Path = NSBezierPath(ovalIn: NSRect(x: 78.5, y: 33.5, width: 9, height: 9))
            green.setFill()
            pc08_on2Path.fill()
            color2.setStroke()
            pc08_on2Path.lineWidth = 1
            pc08_on2Path.stroke()
        }
        
        
        if (playing9) {
            //// pc09_on 2 Drawing
            let pc09_on2Path = NSBezierPath(ovalIn: NSRect(x: 87.5, y: 10.5, width: 8, height: 8))
            green.setFill()
            pc09_on2Path.fill()
            color2.setStroke()
            pc09_on2Path.lineWidth = 1
            pc09_on2Path.stroke()
        }
        
        
        if (playingA) {
            //// pc10_on 2 Drawing
            let pc10_on2Path = NSBezierPath(ovalIn: NSRect(x: 96.5, y: 33.5, width: 9, height: 9))
            green.setFill()
            pc10_on2Path.fill()
            color2.setStroke()
            pc10_on2Path.lineWidth = 1
            pc10_on2Path.stroke()
        }
        
        
        if (playingB) {
            //// pc11_on 2 Drawing
            let pc11_on2Path = NSBezierPath(ovalIn: NSRect(x: 104, y: 10.5, width: 8, height: 8))
            green.setFill()
            pc11_on2Path.fill()
            color2.setStroke()
            pc11_on2Path.lineWidth = 1
            pc11_on2Path.stroke()
        }
        
        NSGraphicsContext.restoreGraphicsState()
        
    }
    
    @objc dynamic public class func drawSizableKeyscaleSensor(kBScale: CGFloat = 1, pc00: Bool = true, pc01: Bool = false, pc02: Bool = true, pc03: Bool = true, pc04: Bool = false, pc05: Bool = true, pc06: Bool = false, pc07: Bool = true, pc08: Bool = true, pc09: Bool = false, pc10: Bool = true, pc11: Bool = false, play0: Bool = false, play1: Bool = false, play2: Bool = false, play3: Bool = false, play4: Bool = false, play5: Bool = false, play6: Bool = false, play7: Bool = false, play8: Bool = false, play9: Bool = false, playA: Bool = false, playB: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        
        //// Variable Declarations
        let kBSize: NSSize = NSSize(width: kBScale * 118, height: kBScale * 66)
        
        //// Symbol Drawing
        let symbolRect = NSRect(x: 0, y: 0, width: kBSize.width, height: kBSize.height)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)
        
        KeyscaleStyleKit.drawKeyscaleBox(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, pc00: pc00, pc01: pc01, pc02: pc02, pc03: pc03, pc04: pc04, pc05: pc05, pc06: pc06, pc07: pc07, pc08: pc08, pc09: pc09, pc10: pc10, pc11: pc11, play0: play0, play1: play1, play2: play2, play3: play3, play4: play4, play5: play5, play6: play6, play7: play7, play8: play8, play9: play9, playA: playA, playB: playB)
        NSGraphicsContext.restoreGraphicsState()
    }
    
    //// Generated Images
    
    @objc dynamic public class func imageOfSizableKeyscaleSensor(kBScale: CGFloat = 1, pc00: Bool = true, pc01: Bool = false, pc02: Bool = true, pc03: Bool = true, pc04: Bool = false, pc05: Bool = true, pc06: Bool = false, pc07: Bool = true, pc08: Bool = true, pc09: Bool = false, pc10: Bool = true, pc11: Bool = false, play0: Bool = false, play1: Bool = false, play2: Bool = false, play3: Bool = false, play4: Bool = false, play5: Bool = false, play6: Bool = false, play7: Bool = false, play8: Bool = false, play9: Bool = false, playA: Bool = false, playB: Bool = false) -> NSImage {
        return NSImage(size: NSSize(width: 118, height: 66), flipped: false) { _ in
            KeyscaleStyleKit.drawSizableKeyscaleSensor(kBScale: kBScale, pc00: pc00, pc01: pc01, pc02: pc02, pc03: pc03, pc04: pc04, pc05: pc05, pc06: pc06, pc07: pc07, pc08: pc08, pc09: pc09, pc10: pc10, pc11: pc11, play0: play0, play1: play1, play2: play2, play3: play3, play4: play4, play5: play5, play6: play6, play7: play7, play8: play8, play9: play9, playA: playA, playB: playB)
            
            return true
        }
    }
    
    
    
    
    @objc(KeyscaleStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }
            
            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

