//
//  TransportControlButtonStyleKit.swift
//  Reactive_Controls
//
//  Created by ThomJordan on 6/19/17.
//  Copyright Â© 2017 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
 
import Cocoa

public class TransportControlButtonStyleKit : NSObject {
    
    //// Drawing Methods
    
    @objc dynamic public class func drawTransportButtonPair(transportState: CGFloat = 1) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        
        //// Image Declarations
        let transportStopClicked = NSImage(named: NSImage.Name("transportStopClicked.png"))!
        let transportDefaultState = NSImage(named: NSImage.Name("transportDefaultState.png"))!
        let transportPlayClicked = NSImage(named: NSImage.Name("transportPlayClicked.png"))!
        let transportPlayEngaged = NSImage(named: NSImage.Name("transportPlayEngaged.png"))!
        let transportRestartingPlay = NSImage(named: NSImage.Name("transportRestartingPlay.png"))!
        let transportStoppingPlay = NSImage(named: NSImage.Name("transportStoppingPlay.png"))!
        
        //// Variable Declarations
        let transportStateSelector: CGFloat = fmod(transportState, 6)
        let isStopClickedState: Bool = transportStateSelector == 0
        let isDefaultState: Bool = transportStateSelector == 1
        let isPlayClickedState: Bool = transportStateSelector == 2
        let isPlayEngagedState: Bool = transportStateSelector == 3
        let isRestartingPlayState: Bool = transportStateSelector == 4
        let isStoppingPlayState: Bool = transportStateSelector == 5
        
        if (isStoppingPlayState) {
            //// theStoppingPlayState Drawing
            let theStoppingPlayStatePath = NSBezierPath(rect: NSRect(x: 0, y: 0, width: 89, height: 33))
            NSGraphicsContext.saveGraphicsState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            theStoppingPlayStatePath.addClip()
            context.draw(
                transportStoppingPlay.cgImage(forProposedRect: nil, context: NSGraphicsContext.current!, hints: nil)!,
                in: NSRect(x: 0, y: 0, width: transportStoppingPlay.size.width, height: transportStoppingPlay.size.height),
                byTiling: true)
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()
        }
        
        
        if (isRestartingPlayState) {
            //// theRestartingPlayState Drawing
            let theRestartingPlayStatePath = NSBezierPath(rect: NSRect(x: 0, y: 0, width: 89, height: 33))
            NSGraphicsContext.saveGraphicsState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            theRestartingPlayStatePath.addClip()
            context.draw(
                transportRestartingPlay.cgImage(forProposedRect: nil, context: NSGraphicsContext.current!, hints: nil)!,
                in: NSRect(x: 0, y: 0, width: transportRestartingPlay.size.width, height: transportRestartingPlay.size.height),
                byTiling: true)
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()
        }
        
        
        if (isPlayEngagedState) {
            //// thePlayEngagedState Drawing
            let thePlayEngagedStatePath = NSBezierPath(rect: NSRect(x: 0, y: 0, width: 89, height: 33))
            NSGraphicsContext.saveGraphicsState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            thePlayEngagedStatePath.addClip()
            context.draw(
                transportPlayEngaged.cgImage(forProposedRect: nil, context: NSGraphicsContext.current!, hints: nil)!,
                in: NSRect(x: 0, y: 0, width: transportPlayEngaged.size.width, height: transportPlayEngaged.size.height),
                byTiling: true)
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()
        }
        
        
        if (isPlayClickedState) {
            //// thePlayClickedState Drawing
            let thePlayClickedStatePath = NSBezierPath(rect: NSRect(x: 0, y: 0, width: 89, height: 33))
            NSGraphicsContext.saveGraphicsState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            thePlayClickedStatePath.addClip()
            context.draw(
                transportPlayClicked.cgImage(forProposedRect: nil, context: NSGraphicsContext.current!, hints: nil)!,
                in: NSRect(x: 0, y: 0, width: transportPlayClicked.size.width, height: transportPlayClicked.size.height),
                byTiling: true)
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()
        }
        
        
        if (isDefaultState) {
            //// theDefaultState Drawing
            let theDefaultStatePath = NSBezierPath(rect: NSRect(x: 0, y: 0, width: 89, height: 33))
            NSGraphicsContext.saveGraphicsState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            theDefaultStatePath.addClip()
            context.draw(
                transportDefaultState.cgImage(forProposedRect: nil, context: NSGraphicsContext.current!, hints: nil)!,
                in: NSRect(x: 0, y: 0, width: transportDefaultState.size.width, height: transportDefaultState.size.height),
                byTiling: true)
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()
        }
        
        
        if (isStopClickedState) {
            //// theStopClickedState Drawing
            let theStopClickedStatePath = NSBezierPath(rect: NSRect(x: 0, y: 0, width: 89, height: 33))
            NSGraphicsContext.saveGraphicsState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            theStopClickedStatePath.addClip()
            context.draw(
                transportStopClicked.cgImage(forProposedRect: nil, context: NSGraphicsContext.current!, hints: nil)!,
                in: NSRect(x: 0, y: 0, width: transportStopClicked.size.width, height: transportStopClicked.size.height),
                byTiling: true)
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()
        }
    }
    
}

