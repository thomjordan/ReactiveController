//
//  BarBeatShader.swift
//  ReactiveControls
//
//  Created by ThomJordan on 7/7/17.
//  Copyright Â© 2017 Rationum. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class BarBeatShader : NSObject {

    //// Cache

    private struct Cache {
        static let darkest: NSColor = NSColor(red: 0.559, green: 0.559, blue: 0.618, alpha: 0.383)
        static let darker: NSColor = BarBeatShader.darkest.highlight(withLevel: 0.21)!
        static let lighter: NSColor = BarBeatShader.darkest.highlight(withLevel: 0.42)!
        static let lightest: NSColor = BarBeatShader.darkest.highlight(withLevel: 0.63)!
    }

    //// Colors

    @objc dynamic public class var darkest: NSColor { return Cache.darkest }
    @objc dynamic public class var darker: NSColor { return Cache.darker }
    @objc dynamic public class var lighter: NSColor { return Cache.lighter }
    @objc dynamic public class var lightest: NSColor { return Cache.lightest }

    //// Drawing Methods

    @objc dynamic public class func drawShadedDownBeats(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 240, height: 80), resizing: ResizingBehavior = .aspectFit, size: NSSize = NSSize(width: 240, height: 80), alphaA: CGFloat = 0.617, alphaB: CGFloat = 0.382) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 240, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 80)



        //// Variable Declarations
        let beat2_xval: CGFloat = size.width / 4.0
        let beat1_xval: CGFloat = beat2_xval * 0
        let beat3_xval: CGFloat = beat2_xval * 2
        let beat4_xval: CGFloat = beat2_xval * 3

        //// beat1rect Drawing
        NSGraphicsContext.saveGraphicsState()
        context.setAlpha(alphaA)

        let beat1rectPath = NSBezierPath(rect: NSRect(x: beat1_xval, y: 0, width: beat2_xval, height: size.height))
        BarBeatShader.lighter.setFill()
        beat1rectPath.fill()

        NSGraphicsContext.restoreGraphicsState()


        //// beat2rect Drawing
        NSGraphicsContext.saveGraphicsState()
        context.setAlpha(alphaB)

        let beat2rectPath = NSBezierPath(rect: NSRect(x: beat2_xval, y: 0, width: beat2_xval, height: size.height))
        BarBeatShader.lightest.setFill()
        beat2rectPath.fill()

        NSGraphicsContext.restoreGraphicsState()


        //// beat3rect Drawing
        NSGraphicsContext.saveGraphicsState()
        context.setAlpha(alphaA)

        let beat3rectPath = NSBezierPath(rect: NSRect(x: beat3_xval, y: 0, width: beat2_xval, height: size.height))
        BarBeatShader.lighter.setFill()
        beat3rectPath.fill()

        NSGraphicsContext.restoreGraphicsState()


        //// beat4rect Drawing
        NSGraphicsContext.saveGraphicsState()
        context.setAlpha(alphaB)

        let beat4rectPath = NSBezierPath(rect: NSRect(x: beat4_xval, y: 0, width: beat2_xval, height: size.height))
        BarBeatShader.lightest.setFill()
        beat4rectPath.fill()

        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawShadedUpBeats(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 240, height: 80), resizing: ResizingBehavior = .aspectFit, size: NSSize = NSSize(width: 240, height: 80), alphaA: CGFloat = 0.617, alphaB: CGFloat = 0.382) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 240, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 80)



        //// Variable Declarations
        let beat2_xval: CGFloat = size.width / 4.0
        let beat1_xval: CGFloat = beat2_xval * 0
        let beat3_xval: CGFloat = beat2_xval * 2
        let beat4_xval: CGFloat = beat2_xval * 3

        //// beat1rect Drawing
        NSGraphicsContext.saveGraphicsState()
        context.setAlpha(alphaB)

        let beat1rectPath = NSBezierPath(rect: NSRect(x: beat1_xval, y: 0, width: beat2_xval, height: size.height))
        BarBeatShader.lightest.setFill()
        beat1rectPath.fill()

        NSGraphicsContext.restoreGraphicsState()


        //// beat2rect Drawing
        NSGraphicsContext.saveGraphicsState()
        context.setAlpha(alphaA)

        let beat2rectPath = NSBezierPath(rect: NSRect(x: beat2_xval, y: 0, width: beat2_xval, height: size.height))
        BarBeatShader.lighter.setFill()
        beat2rectPath.fill()

        NSGraphicsContext.restoreGraphicsState()


        //// beat3rect Drawing
        NSGraphicsContext.saveGraphicsState()
        context.setAlpha(alphaB)

        let beat3rectPath = NSBezierPath(rect: NSRect(x: beat3_xval, y: 0, width: beat2_xval, height: size.height))
        BarBeatShader.lightest.setFill()
        beat3rectPath.fill()

        NSGraphicsContext.restoreGraphicsState()


        //// beat4rect Drawing
        NSGraphicsContext.saveGraphicsState()
        context.setAlpha(alphaA)

        let beat4rectPath = NSBezierPath(rect: NSRect(x: beat4_xval, y: 0, width: beat2_xval, height: size.height))
        BarBeatShader.lighter.setFill()
        beat4rectPath.fill()

        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawDownbeatsShaded(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 480, height: 240), resizing: ResizingBehavior = .aspectFit, size: NSSize = NSSize(width: 240, height: 80), alphaA: CGFloat = 0.617, alphaB: CGFloat = 0.382) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 480, height: 240), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 480, y: resizedFrame.height / 240)


        //// Symbol Drawing
        let symbolRect = NSRect(x: 0, y: 0, width: size.width, height: size.height)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        BarBeatShader.drawShadedDownBeats(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, size: NSSize(width: 240, height: 80), alphaA: alphaA, alphaB: alphaB)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawUpbeatsShaded(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 480, height: 240), resizing: ResizingBehavior = .aspectFit, size: NSSize = NSSize(width: 240, height: 80), alphaA: CGFloat = 0.617, alphaB: CGFloat = 0.382) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 480, height: 240), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 480, y: resizedFrame.height / 240)


        //// Symbol Drawing
        let symbolRect = NSRect(x: 0, y: 0, width: size.width, height: size.height)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        BarBeatShader.drawShadedUpBeats(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, size: NSSize(width: 240, height: 80), alphaA: alphaA, alphaB: alphaB)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }




    @objc(BarBeatShaderResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
