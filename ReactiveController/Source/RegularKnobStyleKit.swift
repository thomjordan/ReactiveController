//
//  RegularKnobStyleKit.swift
//  ReactiveControls
//
//  Created by ThomJordan on 6/19/17.
//  Copyright Â© 2017 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class RegularKnobStyleKit : NSObject {
    
    //// Drawing Methods
    
    @objc dynamic public class func drawActivity(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 156, height: 195), resizing: ResizingBehavior = .aspectFit, moveLevel: CGFloat = 0.618) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 156, height: 195), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 156, y: resizedFrame.height / 195)
        
        
        //// Color Declarations
        let exercise1 = NSColor(red: 0.571, green: 0.923, blue: 0, alpha: 1)
        let exercise2 = NSColor(red: 0.749, green: 0.981, blue: 0, alpha: 1)
        
        //// Gradient Declarations
        let exerciseGradient = NSGradient(starting: exercise1, ending: exercise2)!
        
        //// Variable Declarations
        let moveDash: CGFloat = moveLevel * 408 + 0
        let exersizeDash: CGFloat = moveLevel * 295 + 0
        let standDash: CGFloat = moveLevel * 182 + 0
        let exersizestandStartPoint: CGFloat = 180
        
        //// ColorGroup
        //// ExerciseOval Drawing
        let exerciseOvalPath = NSBezierPath(ovalIn: NSRect(x: 22, y: 39, width: 112, height: 112))
        exerciseGradient.draw(in: exerciseOvalPath, angle: -90)
        NSColor.black.setStroke()
        exerciseOvalPath.lineWidth = 1
        exerciseOvalPath.stroke()
        
        
        
        
        //// MaskGroup
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 78, y: 95)
        context.rotate(by: -90 * CGFloat.pi/180)
        
        context.setBlendMode(.destinationIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        
        //// ExerciseMask Drawing
        NSGraphicsContext.saveGraphicsState()
        context.rotate(by: exersizestandStartPoint * CGFloat.pi/180)
        
        let exerciseMaskPath = NSBezierPath()
        exerciseMaskPath.move(to: NSPoint(x: -47, y: 0))
        exerciseMaskPath.curve(to: NSPoint(x: 0, y: 47), controlPoint1: NSPoint(x: -47, y: 25.96), controlPoint2: NSPoint(x: -25.96, y: 47))
        exerciseMaskPath.curve(to: NSPoint(x: 47, y: 0), controlPoint1: NSPoint(x: 25.96, y: 47), controlPoint2: NSPoint(x: 47, y: 25.96))
        exerciseMaskPath.curve(to: NSPoint(x: -0, y: -47), controlPoint1: NSPoint(x: 47, y: -25.96), controlPoint2: NSPoint(x: 25.96, y: -47))
        exerciseMaskPath.curve(to: NSPoint(x: -47, y: 0), controlPoint1: NSPoint(x: -25.96, y: -47), controlPoint2: NSPoint(x: -47, y: -25.96))
        exerciseMaskPath.close()
        NSColor.black.setStroke()
        exerciseMaskPath.lineWidth = 17
        exerciseMaskPath.lineCapStyle = .roundLineCapStyle
        exerciseMaskPath.setLineDash([exersizeDash, 295], count: 2, phase: 1)
        exerciseMaskPath.stroke()
        
        NSGraphicsContext.restoreGraphicsState()
        
        
        context.endTransparencyLayer()
        
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()
        
    }
    
    @objc dynamic public class func drawActivityComposition(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 156, height: 195), resizing: ResizingBehavior = .aspectFit, moveLevel: CGFloat = 0.618) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 156, height: 195), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 156, y: resizedFrame.height / 195)
        
        
        //// Color Declarations
        let exercise1 = NSColor(red: 0.571, green: 0.923, blue: 0, alpha: 1)
        let exerciseBkg = NSColor(hue: exercise1.hueComponent, saturation: exercise1.saturationComponent, brightness: 0.204, alpha: exercise1.alphaComponent)
        let stand1 = NSColor(red: 0, green: 0.871, blue: 0.863, alpha: 1)
        let standBkg = NSColor(hue: stand1.hueComponent, saturation: stand1.saturationComponent, brightness: 0.23, alpha: stand1.alphaComponent)
        
        //// ColorGroup
        //// ExerciseOval Drawing
        let exerciseOvalPath = NSBezierPath(ovalIn: NSRect(x: 22, y: 39, width: 112, height: 112))
        exerciseBkg.setFill()
        exerciseOvalPath.fill()
        NSColor.black.setStroke()
        exerciseOvalPath.lineWidth = 1
        exerciseOvalPath.stroke()
        
        
        //// StandOval Drawing
        let standOvalPath = NSBezierPath(ovalIn: NSRect(x: 40, y: 57, width: 76, height: 76))
        standBkg.setFill()
        standOvalPath.fill()
        NSColor.black.setStroke()
        standOvalPath.lineWidth = 1
        standOvalPath.stroke()
        
        
        
        
        //// SymbolGroup
        NSGraphicsContext.saveGraphicsState()
        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        
        //// Symbol Drawing
        let symbolRect = NSRect(x: 0, y: 0, width: 156, height: 195)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)
        
        RegularKnobStyleKit.drawActivity(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, moveLevel: moveLevel)
        NSGraphicsContext.restoreGraphicsState()
        
        
        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()
        
        
        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 57.5, y: 74.5, width: 41, height: 41))
        NSColor.black.setFill()
        ovalPath.fill()
        
        NSGraphicsContext.restoreGraphicsState()
        
    }
    
    @objc dynamic public class func drawRegularKnob(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 115, height: 115), resizing: ResizingBehavior = .aspectFit, moveLevel: CGFloat = 0.618) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 115, height: 115), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 115, y: resizedFrame.height / 115)
        
        
        //// symbol Drawing
        let symbolRect = NSRect(x: -20.45, y: -37, width: 156, height: 194)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)
        
        RegularKnobStyleKit.drawActivityComposition(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, moveLevel: moveLevel)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()
        
    }
    
    @objc dynamic public class func drawSizableRegularKnob(moveLevel: CGFloat = 0.618, knobScale: CGFloat = 1) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        
        //// Variable Declarations
        let knobSize: NSSize = NSSize(width: knobScale * 120, height: knobScale * 120)
        
        //// Symbol Drawing
        let symbolRect = NSRect(x: 0, y: 0, width: knobSize.width, height: knobSize.height)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)
        
        RegularKnobStyleKit.drawRegularKnob(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, moveLevel: moveLevel)
        NSGraphicsContext.restoreGraphicsState()
    }
    
    //// Generated Images
    
    @objc dynamic public class func imageOfSizableRegularKnob(moveLevel: CGFloat = 0.618, knobScale: CGFloat = 1) -> NSImage {
        return NSImage(size: NSSize(width: 120, height: 120), flipped: false) { _ in
            RegularKnobStyleKit.drawSizableRegularKnob(moveLevel: moveLevel, knobScale: knobScale)
            
            return true
        }
    }
    
    
    
    
    @objc(RegularKnobStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }
            
            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

