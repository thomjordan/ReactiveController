//
//  ColorWheelKnobStyleKit.swift
//  ReactiveControls
//
//  Created by ThomJordan on 6/19/17.
//  Copyright Â© 2017 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class ColorWheelKnobStyleKit : NSObject {
    
    //// Drawing Methods
    
    @objc dynamic public class func drawColorWheelBasis(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 156, height: 195), resizing: ResizingBehavior = .aspectFit, pointInRange: CGFloat = 0.5, rangeWidth: CGFloat = 0.423, centerOfRange: CGFloat = 0.618) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 156, height: 195), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 156, y: resizedFrame.height / 195)
        
        
        //// Color Declarations
        let clear = NSColor(red: 1, green: 0.149, blue: 0, alpha: 0)
        
        //// Image Declarations
        let color_wheel_365 = NSImage(named: NSImage.Name("color_wheel_365.png"))!
        
        //// Variable Declarations
        let rangeDash: CGFloat = rangeWidth * 295 + 0
        let rangeStartLoc: CGFloat = 540 - centerOfRange * 360 + rangeWidth * 180
        let pointLoc: CGFloat = pointInRange * rangeWidth * -360 + rangeStartLoc
        let centerLoc: CGFloat = 540 - centerOfRange * 360
        let pointDash: CGFloat = 0
        let centerDash: CGFloat = 0
        
        //// outerWheel Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 78, y: 95)
        context.rotate(by: 165 * CGFloat.pi/180)
        context.scaleBy(x: 0.42, y: 0.42)
        
        let outerWheelPath = NSBezierPath(rect: NSRect(x: -182.5, y: -182.5, width: 365, height: 365))
        NSGraphicsContext.saveGraphicsState()
        outerWheelPath.addClip()
        context.draw(color_wheel_365.cgImage(forProposedRect: nil, context: nil, hints: nil)!, in: NSRect(x: -182, y: -183, width: color_wheel_365.size.width, height: color_wheel_365.size.height))
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()
        
        
        //// middleWheel Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 78, y: 95)
        context.rotate(by: 165 * CGFloat.pi/180)
        context.scaleBy(x: 0.31, y: 0.31)
        
        let middleWheelPath = NSBezierPath(rect: NSRect(x: -182.5, y: -182.5, width: 365, height: 365))
        NSGraphicsContext.saveGraphicsState()
        middleWheelPath.addClip()
        context.draw(color_wheel_365.cgImage(forProposedRect: nil, context: nil, hints: nil)!, in: NSRect(x: -182, y: -183, width: color_wheel_365.size.width, height: color_wheel_365.size.height))
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()
        
        
        //// innerWheel Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 78, y: 95)
        context.rotate(by: 165 * CGFloat.pi/180)
        context.scaleBy(x: 0.21, y: 0.21)
        
        let innerWheelPath = NSBezierPath(rect: NSRect(x: -182.5, y: -182.5, width: 365, height: 365))
        NSGraphicsContext.saveGraphicsState()
        innerWheelPath.addClip()
        context.draw(color_wheel_365.cgImage(forProposedRect: nil, context: nil, hints: nil)!, in: NSRect(x: -182, y: -183, width: color_wheel_365.size.width, height: color_wheel_365.size.height))
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()
        
        
        //// ColorGroup
        //// outerOval Drawing
        let outerOvalPath = NSBezierPath(ovalIn: NSRect(x: 4, y: 21, width: 148, height: 148))
        clear.setFill()
        outerOvalPath.fill()
        
        
        //// middleOval Drawing
        let middleOvalPath = NSBezierPath(ovalIn: NSRect(x: 22, y: 39, width: 112, height: 112))
        clear.setFill()
        middleOvalPath.fill()
        NSColor.black.setStroke()
        middleOvalPath.lineWidth = 1
        middleOvalPath.stroke()
        
        
        //// innerOval Drawing
        let innerOvalPath = NSBezierPath(ovalIn: NSRect(x: 40, y: 57, width: 76, height: 76))
        clear.setFill()
        innerOvalPath.fill()
        NSColor.black.setStroke()
        innerOvalPath.lineWidth = 1
        innerOvalPath.stroke()
        
        
        
        
        //// MaskGroup
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 78, y: 95)
        context.rotate(by: -90 * CGFloat.pi/180)
        
        context.setBlendMode(.destinationIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        
        //// outerMask Drawing
        NSGraphicsContext.saveGraphicsState()
        context.rotate(by: pointLoc * CGFloat.pi/180)
        
        let outerMaskPath = NSBezierPath()
        outerMaskPath.move(to: NSPoint(x: -65, y: 0))
        outerMaskPath.curve(to: NSPoint(x: 0, y: 65), controlPoint1: NSPoint(x: -65, y: 35.9), controlPoint2: NSPoint(x: -35.9, y: 65))
        outerMaskPath.curve(to: NSPoint(x: 65, y: 0), controlPoint1: NSPoint(x: 35.9, y: 65), controlPoint2: NSPoint(x: 65, y: 35.9))
        outerMaskPath.curve(to: NSPoint(x: -0, y: -65), controlPoint1: NSPoint(x: 65, y: -35.9), controlPoint2: NSPoint(x: 35.9, y: -65))
        outerMaskPath.curve(to: NSPoint(x: -65, y: 0), controlPoint1: NSPoint(x: -35.9, y: -65), controlPoint2: NSPoint(x: -65, y: -35.9))
        outerMaskPath.close()
        NSColor.black.setStroke()
        outerMaskPath.lineWidth = 17
        outerMaskPath.lineCapStyle = .roundLineCapStyle
        outerMaskPath.setLineDash([pointDash, 408], count: 2, phase: 1)
        outerMaskPath.stroke()
        
        NSGraphicsContext.restoreGraphicsState()
        
        
        //// middleMask Drawing
        NSGraphicsContext.saveGraphicsState()
        context.rotate(by: rangeStartLoc * CGFloat.pi/180)
        
        let middleMaskPath = NSBezierPath()
        middleMaskPath.move(to: NSPoint(x: -47, y: 0))
        middleMaskPath.curve(to: NSPoint(x: 0, y: 47), controlPoint1: NSPoint(x: -47, y: 25.96), controlPoint2: NSPoint(x: -25.96, y: 47))
        middleMaskPath.curve(to: NSPoint(x: 47, y: 0), controlPoint1: NSPoint(x: 25.96, y: 47), controlPoint2: NSPoint(x: 47, y: 25.96))
        middleMaskPath.curve(to: NSPoint(x: -0, y: -47), controlPoint1: NSPoint(x: 47, y: -25.96), controlPoint2: NSPoint(x: 25.96, y: -47))
        middleMaskPath.curve(to: NSPoint(x: -47, y: 0), controlPoint1: NSPoint(x: -25.96, y: -47), controlPoint2: NSPoint(x: -47, y: -25.96))
        middleMaskPath.close()
        NSColor.black.setStroke()
        middleMaskPath.lineWidth = 17
        middleMaskPath.lineCapStyle = .roundLineCapStyle
        middleMaskPath.setLineDash([rangeDash, 295], count: 2, phase: 1)
        middleMaskPath.stroke()
        
        NSGraphicsContext.restoreGraphicsState()
        
        
        //// innerMask Drawing
        NSGraphicsContext.saveGraphicsState()
        context.rotate(by: centerLoc * CGFloat.pi/180)
        
        let innerMaskPath = NSBezierPath()
        innerMaskPath.move(to: NSPoint(x: -29, y: 0))
        innerMaskPath.curve(to: NSPoint(x: 0, y: 29), controlPoint1: NSPoint(x: -29, y: 16.02), controlPoint2: NSPoint(x: -16.02, y: 29))
        innerMaskPath.curve(to: NSPoint(x: 29, y: 0), controlPoint1: NSPoint(x: 16.02, y: 29), controlPoint2: NSPoint(x: 29, y: 16.02))
        innerMaskPath.curve(to: NSPoint(x: -0, y: -29), controlPoint1: NSPoint(x: 29, y: -16.02), controlPoint2: NSPoint(x: 16.02, y: -29))
        innerMaskPath.curve(to: NSPoint(x: -29, y: 0), controlPoint1: NSPoint(x: -16.02, y: -29), controlPoint2: NSPoint(x: -29, y: -16.02))
        innerMaskPath.close()
        NSColor.black.setStroke()
        innerMaskPath.lineWidth = 17
        innerMaskPath.lineCapStyle = .roundLineCapStyle
        innerMaskPath.setLineDash([centerDash, 182], count: 2, phase: 1)
        innerMaskPath.stroke()
        
        NSGraphicsContext.restoreGraphicsState()
        
        
        context.endTransparencyLayer()
        
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()
        
    }
    
    @objc dynamic public class func drawColorWheel(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 156, height: 195), resizing: ResizingBehavior = .aspectFit, pointInRange: CGFloat = 0.5, rangeWidth: CGFloat = 0.423, centerOfRange: CGFloat = 0.618) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 156, height: 195), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 156, y: resizedFrame.height / 195)
        
        
        //// Color Declarations
        let mainColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let pointBkg = NSColor(hue: mainColor.hueComponent, saturation: mainColor.saturationComponent, brightness: 0.196, alpha: mainColor.alphaComponent)
        let rangeBkg = NSColor(hue: mainColor.hueComponent, saturation: mainColor.saturationComponent, brightness: 0.22, alpha: mainColor.alphaComponent)
        let centerBkg = NSColor(hue: mainColor.hueComponent, saturation: mainColor.saturationComponent, brightness: 0.24, alpha: mainColor.alphaComponent)
        
        //// ColorGroup
        //// MaskOval Drawing
        let maskOvalPath = NSBezierPath(ovalIn: NSRect(x: 4, y: 21, width: 148, height: 148))
        pointBkg.setFill()
        maskOvalPath.fill()
        
        
        //// ExerciseOval Drawing
        let exerciseOvalPath = NSBezierPath(ovalIn: NSRect(x: 22, y: 39, width: 112, height: 112))
        rangeBkg.setFill()
        exerciseOvalPath.fill()
        NSColor.black.setStroke()
        exerciseOvalPath.lineWidth = 1
        exerciseOvalPath.stroke()
        
        
        //// StandOval Drawing
        let standOvalPath = NSBezierPath(ovalIn: NSRect(x: 40, y: 57, width: 76, height: 76))
        centerBkg.setFill()
        standOvalPath.fill()
        NSColor.black.setStroke()
        standOvalPath.lineWidth = 1
        standOvalPath.stroke()
        
        
        
        
        //// SymbolGroup
        NSGraphicsContext.saveGraphicsState()
        context.setBlendMode(.sourceAtop)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        
        //// Symbol Drawing
        let symbolRect = NSRect(x: 0, y: 0, width: 156, height: 195)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)
        
        ColorWheelKnobStyleKit.drawColorWheelBasis(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, pointInRange: pointInRange, rangeWidth: rangeWidth, centerOfRange: centerOfRange)
        NSGraphicsContext.restoreGraphicsState()
        
        
        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()
        
        
        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 57.5, y: 74.5, width: 41, height: 41))
        NSColor.black.setFill()
        ovalPath.fill()
        
        NSGraphicsContext.restoreGraphicsState()
        
    }
    
    @objc dynamic public class func drawColorScrubKnob(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 116, height: 116), resizing: ResizingBehavior = .aspectFit, pointInRange: CGFloat = 0.5, rangeWidth: CGFloat = 0.423, centerOfRange: CGFloat = 0.618) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 116, height: 116), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 116, y: resizedFrame.height / 116)
        
        
        //// Symbol Drawing
        let symbolRect = NSRect(x: -2.33, y: -15, width: 121, height: 150)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)
        
        ColorWheelKnobStyleKit.drawColorWheel(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, pointInRange: pointInRange, rangeWidth: rangeWidth, centerOfRange: centerOfRange)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()
        
    }
    
    @objc dynamic public class func drawSizableKnob(knobScale: CGFloat = 1, pointInRange: CGFloat = 0.5, rangeWidth: CGFloat = 0.423, centerOfRange: CGFloat = 0.618) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        
        //// Variable Declarations
        let knobSize: NSSize = NSSize(width: knobScale * 90, height: knobScale * 90)
        
        //// Symbol Drawing
        let symbolRect = NSRect(x: 0, y: 0, width: knobSize.width, height: knobSize.height)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)
        
        ColorWheelKnobStyleKit.drawColorScrubKnob(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, pointInRange: pointInRange, rangeWidth: rangeWidth, centerOfRange: centerOfRange)
        NSGraphicsContext.restoreGraphicsState()
    }
    
    //// Generated Images
    
    @objc dynamic public class func imageOfSizableKnob(knobScale: CGFloat = 1, pointInRange: CGFloat = 0.5, rangeWidth: CGFloat = 0.423, centerOfRange: CGFloat = 0.618) -> NSImage {
        return NSImage(size: NSSize(width: 90, height: 90), flipped: false) { _ in
            ColorWheelKnobStyleKit.drawSizableKnob(knobScale: knobScale, pointInRange: pointInRange, rangeWidth: rangeWidth, centerOfRange: centerOfRange)
            
            return true
        }
    }
    
    
    
    
    @objc(ColorWheelKnobStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }
            
            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

